#!/usr/bin/env python
""" Implements a control algorithm to move the turtle between waypoints.

     SUBSCRIBERS:
        pose (turtlesim/pose) ~ position feedback from a turtle

     PUBLISHERS:
        turtle_vel (TurtleVel) ~ command for the turtle to move

     PARAMETERS:
        waypoints (List) ~ A list of x,y coordinates for each waypoint
        ~dist_thresh (float64) ~ distance that determines when turtle arrives
        ~ang_thresh (float64) ~ when to stop turning toward the waypoint
        ~K_lin (float64) ~ gain used for linear motion
        ~K_ang (float64) ~ gain used for angular motion
        ~v_max (float64) ~ max linear speed
"""
from __future__ import division
import rospy
from math import atan2, sqrt, pi
from turtlesim.msg import Pose
from turtlesim.srv import TeleportAbsolute, Spawn, SetPen
from turtle_control.msg import TurtleVel

class WaypointNode(object):
    """ Sets up publishers and subscribers to move the turtle between waypoints
    """

    def __init__(self):

        # initialize the node and read the parameters from the parameter server
        rospy.init_node("waypoint")
        self._waypoints = rospy.get_param("waypoints")
        self._dist_thresh = rospy.get_param("~dist_thresh")
        self._ang_thresh = rospy.get_param("~ang_thresh")
        self._K_lin = rospy.get_param("~K_lin")
        self._K_ang = rospy.get_param("~K_ang")
        self._v_max = rospy.get_param("~v_max")
        self._mark = "mark" # name of the turtle that telports
        self._index = 0     # index into the waypoints we want to follow

        # used to publish the velocity commands we wish to send to the turtle
        self._pub = rospy.Publisher("turtle_vel", TurtleVel, queue_size = 10)

        # this service is used to teleport self._mark to a new location
        self._tele = rospy.ServiceProxy(self._mark + "/teleport_absolute",
                                        TeleportAbsolute)

        # spawn the self._mark turtle at the location of the first waypoint
        # and turn it's pen off
        spawn = rospy.ServiceProxy("spawn", Spawn)
        spawn(x = self._waypoints[0][0], y = self._waypoints[0][1],
              theta = 0, name = self._mark)
        setpen = rospy.ServiceProxy("mark/set_pen", SetPen)
        setpen(off = True)

        # start receiving pose messages, where we implement the feedback loop
        rospy.Subscriber("pose", Pose, self.pose_callback)

    def pose_callback(self, msg):
        """ Called in response to getting a measurement of the turtle's pose.
            Implements the control loop, publishing velocity commands accordingly.

            Args:
             msg (turtlesim/Pose) the position of the turtle
        """

        # The turtle will follow a turn-drive straight strategy

        # compute the angle to the waypoint
        way = self._waypoints[self._index]
        xd = way[0]
        yd = way[1]
        dx = xd - msg.x
        dy = yd - msg.y
        dist = sqrt(dx**2 + dy**2)
        ang = atan2(dy, dx)
        ang_diff = ang - msg.theta
        omega = ang_diff
        v = 0
        omega = 0

        # If the turtle has arrived at the waypoint, go to the next waypoint
        if dist < self._dist_thresh:
            self._index += 1
            if self._index == len(self._waypoints):
                self._index = 0
            nextw = self._waypoints[self._index]
            nx = nextw[0]
            ny = nextw[1]
            self._tele(x = nx, y = ny, theta  = 0)
        else:
            if abs(ang_diff) < self._ang_thresh:
                v = max(self._v_max,  self._K_lin*dist)
            else:
                omega = self._K_ang*ang_diff

        self._pub.publish(TurtleVel(linear = v, angular = omega))

def main():
    w = WaypointNode()
    rospy.spin()

if __name__ == "__main__":
    try:
        main()
    except rospy.ROSInterruptException:
        pass
