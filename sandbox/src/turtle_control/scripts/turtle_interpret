#!/usr/bin/env python

import rospy
from turtle_control.msg import TurtleVel
from geometry_msgs.msg import Twist, Vector3
from turtle_control.srv import VelTranslate, VelTranslateResponse

class TurtleInterpret(object):
    """
    text
    """

    def __init__(self):
        """
        starts new node
        """
        rospy.init_node('turtle_interpret')
        self.sub = rospy.Subscriber("turtle_vel", TurtleVel, self.callback)
        self.pub = rospy.Publisher('/turtle1/cmd_vel', Twist, queue_size=10)
        self.srv = rospy.Service("vel_translate", VelTranslate, self.translate)

    def callback(self, TurtleVel):
        rospy.logdebug("input vel: " + str(TurtleVel))
        self.pub.publish(Twist(linear = Vector3(x = TurtleVel.linear, y = 0, z = 0),
                              angular = Vector3(x = 0, y = 0, z = TurtleVel.angular)))

    def translate(self, VelTranslate):
        """
        TURTLE CAN ONLY MOVE FORWARD, LOOKIT THAT
        """
        if VelTranslate.twist.linear.y != 0 or VelTranslate.twist.linear.z !=0 or VelTranslate.twist.angular.x != 0 or VelTranslate.twist.angular.y != 0:
            return none
        else:
            return VelTranslateResponse(TurtleVel(linear = VelTranslate.twist.linear.x, angular = VelTranslate.twist.angular.z))

def main():
    TurtleInterpret()
    rospy.spin()

if __name__ == "__main__":
    try:
        main()
    except rospy.ROSInterruptException:
        pass
