// Generated by gencpp from file crazy_turtle/SwitchRequest.msg
// DO NOT EDIT!


#ifndef CRAZY_TURTLE_MESSAGE_SWITCHREQUEST_H
#define CRAZY_TURTLE_MESSAGE_SWITCHREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <turtlesim/Pose.h>

namespace crazy_turtle
{
template <class ContainerAllocator>
struct SwitchRequest_
{
  typedef SwitchRequest_<ContainerAllocator> Type;

  SwitchRequest_()
    : mixed_up()  {
    }
  SwitchRequest_(const ContainerAllocator& _alloc)
    : mixed_up(_alloc)  {
  (void)_alloc;
    }



   typedef  ::turtlesim::Pose_<ContainerAllocator>  _mixed_up_type;
  _mixed_up_type mixed_up;





  typedef boost::shared_ptr< ::crazy_turtle::SwitchRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::crazy_turtle::SwitchRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SwitchRequest_

typedef ::crazy_turtle::SwitchRequest_<std::allocator<void> > SwitchRequest;

typedef boost::shared_ptr< ::crazy_turtle::SwitchRequest > SwitchRequestPtr;
typedef boost::shared_ptr< ::crazy_turtle::SwitchRequest const> SwitchRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::crazy_turtle::SwitchRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::crazy_turtle::SwitchRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace crazy_turtle

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'turtlesim': ['/opt/ros/melodic/share/turtlesim/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::crazy_turtle::SwitchRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::crazy_turtle::SwitchRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crazy_turtle::SwitchRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crazy_turtle::SwitchRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crazy_turtle::SwitchRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crazy_turtle::SwitchRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::crazy_turtle::SwitchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d72720c2aaa137dbd21147e3b93a9daf";
  }

  static const char* value(const ::crazy_turtle::SwitchRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd72720c2aaa137dbULL;
  static const uint64_t static_value2 = 0xd21147e3b93a9dafULL;
};

template<class ContainerAllocator>
struct DataType< ::crazy_turtle::SwitchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "crazy_turtle/SwitchRequest";
  }

  static const char* value(const ::crazy_turtle::SwitchRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::crazy_turtle::SwitchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtlesim/Pose mixed_up\n"
"\n"
"================================================================================\n"
"MSG: turtlesim/Pose\n"
"float32 x\n"
"float32 y\n"
"float32 theta\n"
"\n"
"float32 linear_velocity\n"
"float32 angular_velocity\n"
;
  }

  static const char* value(const ::crazy_turtle::SwitchRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::crazy_turtle::SwitchRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mixed_up);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SwitchRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::crazy_turtle::SwitchRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::crazy_turtle::SwitchRequest_<ContainerAllocator>& v)
  {
    s << indent << "mixed_up: ";
    s << std::endl;
    Printer< ::turtlesim::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.mixed_up);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CRAZY_TURTLE_MESSAGE_SWITCHREQUEST_H
